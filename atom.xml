<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[nichijouYC's Blog]]></title>
  <link href="http://nichijouyc.github.io/atom.xml" rel="self"/>
  <link href="http://nichijouyc.github.io/"/>
  <updated>2015-09-04T00:46:36+08:00</updated>
  <id>http://nichijouyc.github.io/</id>
  <author>
    <name><![CDATA[nichijouYC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[机器学习实战笔记(三)]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/09/03/machine-learning-in-action-note-three/"/>
    <updated>2015-09-03T22:24:38+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/09/03/machine-learning-in-action-note-three</id>
    <content type="html"><![CDATA[<h2>分类算法——决策树(decision tree)</h2>

<h3>简单介绍</h3>

<p>通过已有的样本数据构建树形分类器对未知样本进行分类</p>

<!--more-->


<h3>优缺点</h3>

<ul>
<li>优点

<ul>
<li>计算复杂度不高，易于理解</li>
<li>效率高，决策树只需要一次构建，反复使用</li>
</ul>
</li>
<li>缺点

<ul>
<li>容易发生过拟合问题(指对已有样本数据分类结果较好，但对新数据和与样本数据相差较大的数据分类结果较差)</li>
</ul>
</li>
</ul>


<h3>实现步骤(使用ID3算法生成决策树)</h3>

<ol>
<li>计算初始样本的熵</li>
<li>计算按每个特征属性划分数据后获得的信息增益</li>
<li>选择增益最高的特征属性作为划分依据，划分样本</li>
<li>重复1-3步，递归生成整个决策树，直到特征属性全部划分完。<br/>
若特征属性全部划分完后，仍还有剩余样本无法分类，则选择所属类别中出现次数最多的类别作为分支的类别</li>
</ol>


<h3>熵(entropy)</h3>

<ul>
<li>1948年，香农提出了“信息熵”的概念，解决了对信息的量化度量问题。香农用信息熵的概念来描述信源的不确定度。</li>
<li>变量的不确定性越大，熵也就越大，把它搞清楚所需要的信息量也就越大。</li>
<li>一个系统越是有序，信息熵就越低；反之，一个系统越是混乱，信息熵就越高。所以，信息熵也可以说是系统有序化程度的一个度量。</li>
<li>计算公式：<br/>
<img src="http://nichijouyc.github.io/pic/entropy.jpg" alt="entropy" /></li>
</ul>


<h3>信息增益(infoGain)</h3>

<ul>
<li>信息增益=infoGain=baseEntropy-newEntropy=原有熵-当前熵</li>
<li>特征T给分类F带来的信息增益为IG(T)=H(F)-H(F|T)。</li>
<li>H(F|T)包含两种情况：一种是特征T出现，标记为t，一种是特征T不出现，标记为t'</li>
<li>所以H(F|T)=P(t)H(F|t)+P(t')H(F|t')</li>
</ul>


<h3>实现工具包</h3>

<p>Python机器学习工具包<code>sklearn</code>中的<code>tree</code>类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">tree</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class='line'><span class="n">Y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">clf</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">DecisionTreeClassifier</span><span class="p">()</span>
</span><span class='line'><span class="n">clf</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>
</span><span class='line'><span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习实战笔记(二)]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/09/02/machine-learning-in-action-note-two/"/>
    <updated>2015-09-02T14:29:54+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/09/02/machine-learning-in-action-note-two</id>
    <content type="html"><![CDATA[<h2>分类算法——K近邻算法(K-Nearest Nerghboor)</h2>

<h3>简单介绍</h3>

<ul>
<li>将未知样本与已知样本的特征属性作对比，计算与已有样本之间的距离</li>
<li>取与未知样本最小距离的k个已知样本，统计样本中出现次数最多的分类作为未知样本的分类</li>
</ul>


<!-- more -->


<h3>优缺点</h3>

<ul>
<li>优点

<ul>
<li>精度高，对异常值不敏感</li>
</ul>
</li>
<li>缺点

<ul>
<li>复杂度高，效率低</li>
<li>每次需计算未知样本点与每个已知样本点的距离，时间久</li>
<li>每次分类时需要将所有已知点的特征属性存储下来，空间大</li>
</ul>
</li>
</ul>


<h3>实现步骤</h3>

<ol>
<li>计算未知点与已知点的距离(欧几里德距离)</li>
<li>按距离递增排序</li>
<li>选取与未知点距离最小的k个已知点</li>
<li>确定k个点的所在类别</li>
<li>将k个点类别最多的类别作为未知点的类别</li>
</ol>


<h3>实现工具包</h3>

<p>Python机器学习工具包<code>sklearn</code>中的<code>KNeighborsClassifier</code>类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#-*- coding:utf8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsClassifier</span>
</span><span class='line'><span class="c">#创建分类器，设置k值为3，取最近3个邻居</span>
</span><span class='line'><span class="n">neigh</span> <span class="o">=</span> <span class="n">KNeighborsClassifier</span><span class="p">(</span><span class="n">n_neighbors</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">],</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]]</span>
</span><span class='line'><span class="n">Y</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">neigh</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">neigh</span><span class="o">.</span><span class="n">predict</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">]])</span>
</span><span class='line'><span class="k">print</span> <span class="n">neigh</span><span class="o">.</span><span class="n">predict_proba</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习实战笔记(一)]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/08/31/machine-learning-in-action-note-one/"/>
    <updated>2015-08-31T22:05:24+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/08/31/machine-learning-in-action-note-one</id>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/24703171/">机器学习实战</a>是一本机器学习的入门书。
作者用简洁易懂的语言介绍了机器学习领域中几个基本算法的原理和其应用。
另外本书使用Python完成相关算法的实现与应用。</p>

<p>本系列是我边看这本书边记下的笔记，一方面希望可以加深自己的理解，另外，也希望可以帮助读者快速理解机器学习中的相关算法。</p>

<!-- more -->


<h2>机器学习算法分类</h2>

<ul>
<li>监督学习(有训练集)

<ul>
<li>离散型目标变量(分类器算法)

<ul>
<li>knn(最近邻算法)</li>
<li>svm(支持向量机)</li>
<li>决策树算法</li>
<li>贝叶斯算法</li>
</ul>
</li>
<li>连续、数值型目标变量(回归算法)

<ul>
<li>Logistic回归算法</li>
<li>线性回归算法</li>
<li>树回归</li>
</ul>
</li>
</ul>
</li>
<li>无监督学习(无训练集)

<ul>
<li>聚类算法

<ul>
<li>k-means(k均值算法)</li>
</ul>
</li>
<li>密度估计</li>
</ul>
</li>
</ul>


<p>&lt;&lt;机器学习实战>>一书中讲解以下相关算法:</p>

<ul>
<li>knn</li>
<li>决策树</li>
<li>朴素贝叶斯分类</li>
<li>Logistic回归</li>
<li>支持向量机</li>
<li>AdaBoost</li>
<li>线性回归</li>
<li>树回归</li>
<li>k-means</li>
<li>Apriori</li>
<li>FP-growth</li>
</ul>


<h2>机器学习一般步骤</h2>

<ol>
<li>收集数据</li>
<li>准备输入数据(调整格式，方便使用代码读取)</li>
<li>分析输入数据(确保没有垃圾数据，做归一化处理)</li>
<li>训练算法</li>
<li>测试算法(评估效果，并且不断迭代4，5步进行优化)</li>
<li>使用算法</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrapy_Quick_Start]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/07/22/scrapy-quick-start/"/>
    <updated>2015-07-22T10:39:42+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/07/22/scrapy-quick-start</id>
    <content type="html"><![CDATA[<p>Scrapy的官网教程十分详细，并且也有中文版，推荐阅读。</p>

<p><a href="http://doc.scrapy.org/en/1.0/intro/overview.html">英文版</a></p>

<p><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/intro/overview.html">中文版</a></p>

<h2>Scrapy环境搭建及简单实例</h2>

<!-- more -->


<hr />

<p>Scrapy(<a href="http://scrapy.org/">官网</a>)是Python环境下的一个Web抓取框架，可以方便的抓取Web页面并且提取结构化数据。</p>

<h3>Win7下搭建Python爬虫库Scrapy步骤</h3>

<hr />

<p>Scrapy官网安装教程(<a href="http://doc.scrapy.org/en/1.0/intro/install.html">地址</a>)</p>

<h4>步骤</h4>

<ul>
<li>安装 Python2.7(<a href="https://www.python.org/downloads/">地址</a>)</li>
<li>安装 pywin32(<a href="http://sourceforge.net/projects/pywin32/files">地址</a>)</li>
<li>安装Python包管理工具 PIP

<ol>
<li>下载 pip文件pip-7.1.0.tar.gz(<a href="https://pypi.python.org/pypi/pip#downloads">地址</a>)</li>
<li>下载 setuptools文件setuptools-18.0.1.tar.gz(<a href="https://pypi.python.org/pypi/setuptools">地址</a>)</li>
<li>解压文件到Python安装目录下的 <code>Lib/site-packages/</code>下</li>
<li>进入PIP目录运行<code>setup.py</code>安装(<code>python setup.py install</code>)</li>
<li>将Python安装目录下的<code>\Scripts</code>加入环境变量Path中</li>
</ol>
</li>
<li>安装Scrapy

<ol>
<li>命令行运行<code>pip install scrapy</code>进行下载安装</li>
<li>命令行输入<code>scrapy</code>，查看安装是否成功</li>
</ol>
</li>
</ul>


<h3>使用Scrapy爬虫的一个简单实例</h3>

<hr />

<p>Scrapy官网实例教程(<a href="http://doc.scrapy.org/en/1.0/intro/tutorial.html">地址</a>)</p>

<p>使用Scrapy抓取本博客的博文列表</p>

<ul>
<li><p>创建一个新的Scrapy项目</p>

<ul>
<li>在一个空目录下打开命令行执行：<code>scrapy startproject tutorial</code>，会新生成一个名为tutorial的文件夹</li>
<li><p>目录结构如下：</p>

<pre><code>  tutorial/
  scrapy.cfg            # deploy configuration file
  tutorial/             # project's Python module, you'll import your code from here
      __init__.py
      items.py          # project items file
      pipelines.py      # project pipelines file
      settings.py       # project settings file
      spiders/          # a directory where you'll later put your spiders
          __init__.py
          ...
</code></pre></li>
</ul>
</li>
<li><p>定义抓取目标（Item）</p>

<ul>
<li>本实例暂不使用</li>
</ul>
</li>
<li><p>定义自己的爬虫(Spiders)</p>

<ol>
<li>在spiders文件夹下新建spider.py文件</li>
<li>定义一个继承scrapy.Spider的BlogSpider类</li>
<li><p>定义BlogSpider类的name(名称)，start_urls(抓取网页url)和parse方法(对抓到的页面html的处理)</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Spider</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.selector</span> <span class="kn">import</span> <span class="n">Selector</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;C:</span><span class="se">\</span><span class="s">out.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="c">#将打印信息输出在相应的位置下</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BlogSpider</span><span class="p">(</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;blogspider&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;github.io&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;<a href="http://nichijouyc.github.io/blog/archives/&amp;quot;">http://nichijouyc.github.io/blog/archives/&amp;quot;</a></span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Blog List:&#39;</span>
</span><span class='line'>        <span class="n">sel</span> <span class="o">=</span> <span class="n">Selector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="n">blogs</span> <span class="o">=</span> <span class="n">sel</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//article/div/article/h1/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">blog</span> <span class="ow">in</span> <span class="n">blogs</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">blog</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;gb2312&#39;</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p></li>
</ol>
</li>
<li><p>开始抓取</p>

<ul>
<li>在tutorial目录下执行<code>scrapy crawl blogspider</code>，在c盘的<code>out.txt</code>文件中出现本博客的博文列表，抓取成功。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub_Octopress_Blog_Tutorial]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/07/21/github-octopress-blog-tutorial/"/>
    <updated>2015-07-21T11:32:41+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/07/21/github-octopress-blog-tutorial</id>
    <content type="html"><![CDATA[<h2>使用Octopress在GitHub上搭建个人Blog</h2>

<p><a href="http://octopress.org">Octopress首页</a></p>

<h3>步骤</h3>

<!-- more -->


<ul>
<li>安装Git(<a href="http://git-scm.com/download/">地址</a>),配置Git与GitHub相连</li>
<li>安装Ruby，版本1.9.3以上

<ul>
<li><a href="http://octopress.org/docs/setup/rbenv/">Rbenv安装Ruby教程（Linux or OS X）</a></li>
<li><a href="http://rubyinstaller.org">RubyInstaller安装Ruby（Win）</a></li>
</ul>
</li>
<li>安装ExecJS(Linux)(<a href="https://github.com/sstephenson/execjs">地址</a>)，或者安装Devkit(Win)(<a href="http://rubyinstaller.org/downloads/">地址</a>)
由于本机使用的是Win7，所以以下步骤为安装DevKit后的步骤。Linux或OS X系统的设置步骤见<a href="http://octopress.org/docs/setup/">Octopress官网教程</a></li>
<li>解压DevKit后（注意：解压目录中必须没有中文和空格），在命令行输入以下命令进行安装

<ol>
<li>cd 进入DevKit目录</li>
<li>ruby dk.rb init</li>
<li>ruby dk.rb install</li>
</ol>
</li>
<li>用Git安装Octopress，在Ruby目录下安装

<ol>
<li>cd 进入Ruby目录</li>
<li>git clone git://github.com/imathis/octopress.git octopress</li>
</ol>
</li>
<li>安装依赖工具bundle。由于国内网络原因，可能直接安装会出现错误，建议替换淘宝源可解决(<a href="http://ruby.taobao.org/">地址</a>)

<ol>
<li>cd 进入Octopress目录</li>
<li>gem install bundle</li>
<li>bundle install（可能提示缺少某些依赖包，按照提示安装缺少的依赖包即可）</li>
</ol>
</li>
<li>安装Octopress默认主题

<ol>
<li>rake install</li>
</ol>
</li>
<li>支持中文编码（配置环境变量）

<ol>
<li>LANG=zh_CN.UTF-8</li>
<li>LC_ALL=zh_CN.UTF-8</li>
</ol>
</li>
<li>修改Blog名，作者等配置

<ol>
<li>修改octopress/_config.yml文件的url，title，subtitle，author等值</li>
</ol>
</li>
<li>部署和预览（发布新博客或者修改配置后）

<ol>
<li>rake generate</li>
<li>rake preview</li>
<li>本地访问地址：<a href="http://localhost:4000/">http://localhost:4000/</a></li>
</ol>
</li>
<li>写博客

<ol>
<li>rake new_post[&ldquo;title&rdquo;]</li>
<li>修改octopress/source/_posts下的md文件</li>
<li>重新发布和预览</li>
</ol>
</li>
<li>部署在Github上

<ol>
<li>在GitHub上新建一个名为user-id.github.io的版本库（user-id为你的GitHub用户名）。GitHub会自动为其生成网站地址user-id.github.io</li>
<li>将Octopress目录中的public文件夹上传至GitHub版本库中</li>
<li>访问user-id.github.io即可看到生成的博客页面</li>
<li>如果对页面有修改，先在本地进行部署和预览，然后将public文件夹上传即可</li>
</ol>
</li>
<li>加快Blog访问速度

<ul>
<li>由于HTML中的某些资源(字体和脚本)有由google提供的，所以国内访问起来很慢。使用国内的替代品可以解决(<a href="http://libs.useso.com/">360</a>)</li>
<li>将source/_includes/head.html和source/_include/custom/head.html中的googleapis.com改成useso.com 即可</li>
<li>若不使用Google Analyze的话，可以将source/_includes/head.html中的包含google_analytics页面注释掉</li>
</ul>
</li>
<li>阅读更多(read on)

<ul>
<li>正常情况下，Octopress首页会显示每篇blog的全部内容，这样会使得页面很长，不易浏览和阅读早期的blog</li>
<li>我们可以在每篇blog中添加<code>read on</code>按钮，使得在首页只显示本篇blog的部分内容，点击<code>read on</code>按钮可以进入本blog页面显示全部内容</li>
<li>完成这个效果，只要编辑blog的md文件，在你想要部分显示内容的后面插入<code>&lt;!-- more --&gt;</code>即可</li>
</ul>
</li>
<li>插入代码，并设置语法高亮

<ul>
<li>行内代码如<code>cd ..</code>,使用两个反引号``包含代码片段</li>
<li>多行代码块，可以使用下图方式插入代码并且实现语法高亮
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span> <span class="o">%</span> <span class="n">codeblock</span> <span class="p">[</span><span class="n">title</span><span class="p">]</span> <span class="p">[</span><span class="n">lang</span><span class="p">:</span><span class="n">language</span><span class="p">]</span> <span class="p">[</span><span class="n">url</span><span class="p">]</span> <span class="p">[</span><span class="n">link</span> <span class="n">text</span><span class="p">]</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="n">python</span> <span class="n">code</span>
</span><span class='line'><span class="p">{</span> <span class="o">%</span> <span class="n">endcodeblock</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
注意在实际使用中去掉<code>{ %</code>中的空格</li>
<li>注意多行代码块的这个语法在普通markdown中不适用。在普通markdown语法中，可以通过<code>``` python</code>来插入代码块并且设置语法高亮</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Octopress Blog]]></title>
    <link href="http://nichijouyc.github.io/blog/2015/07/20/my-first-octopress-blog/"/>
    <updated>2015-07-20T11:28:20+08:00</updated>
    <id>http://nichijouyc.github.io/blog/2015/07/20/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<p>Hello,Octopress</p>
]]></content>
  </entry>
  
</feed>
